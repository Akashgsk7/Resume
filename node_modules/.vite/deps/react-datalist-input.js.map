{
  "version": 3,
  "sources": ["../../react-datalist-input/src/index.tsx", "dep:react-datalist-input"],
  "sourcesContent": ["import type {\n  PropsWithChildren,\n  PropsWithRef,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  ReactNode,\n  CSSProperties,\n  RefObject,\n  MutableRefObject,\n  SetStateAction,\n  Dispatch,\n} from 'react';\nimport React, {\n  createContext,\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useDeferredValue,\n  useId,\n} from 'react';\n\n/*\n * References:\n * [ARIA1.1#comboBox]: https://www.w3.org/TR/wai-aria-1.1/#combobox\n * [ARIA1.2#comboBox]: https://www.w3.org/TR/wai-aria-1.2/#combobox\n *\n * Low-level Components:\n * - ComboboxInput: The textbox input field\n * - Listbox: The container that holds the list of options\n * - ListboxOption: One listbox option\n * - Highlight: Highlighting of matching text of the listbox option\n *\n * High-level Components:\n * - Combobox: A container that you can pass all low-level components yourself (advanced use-cases)\n * - DatalistInput: A container that renders all low-level components for you (simple use-cases)\n */\n\n/*\n * \"Typically, the default state of a combobox is collapsed.\" [ARIA1.1#combobox]\n * If the developer does not manage the open state on its own, by default this component will collapse the listbox.\n * This ensures that the datalist input components (by default) matches the behavior of the native datalist element\n */\nconst DEFAULT_IS_EXPANDED = false;\n\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production';\n\n/*\n * Utilities\n */\n\nconst contextRequiredWarning = (name: string) =>\n  `The ${name} component must be a child of Combobox. Please wrap the component inside Combobox to ensure that the required context is available.`;\n\n/**\n * This function is inspired by tiny-warning: https://github.com/alexreardon/tiny-warning\n */\nfunction assertWithWarning(condition: boolean, text: string): void {\n  // wrapping in production check for better dead code elimination\n  if (!IS_PRODUCTION) {\n    if (condition) {\n      return;\n    }\n\n    // check console for IE9 support which provides console\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    // Throwing an error and catching it immediately\n    // to improve debugging\n    // A consumer can use 'pause on caught exceptions'\n    // https://github.com/facebook/react/issues/4216\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\n/**\n * Composes different event handlers into a single event handler.\n */\ntype HandleWith = <Event>(...fns: Array<((e: Event) => void) | undefined>) => (e: Event) => void;\nconst handleWith: HandleWith =\n  (...fns) =>\n  (e) =>\n    fns.forEach((fn) => fn && fn(e));\n\n/*\n * Hooks and context\n */\n\ninterface ComboboxContext {\n  contextAvailable: boolean; // Flag that context is available\n  listboxId?: string; // The element that describes the option list of the element. [ARIA1.1#combobox]\n  selectedItemId?: string; // The element that describes the selected option of the combobox.\n  isExpanded?: boolean;\n}\n\nconst ComboboxContext = createContext<ComboboxContext>({\n  contextAvailable: true,\n  listboxId: '',\n  selectedItemId: '',\n  isExpanded: DEFAULT_IS_EXPANDED,\n});\n\nconst useComboboxContext = () => useContext(ComboboxContext);\n\n/**\n * Use this hook to control the open state and input value of the combobox.\n * Pass the properties down to the DataListInput component.\n */\nconst useComboboxControls = (params?: { isExpanded: boolean; initialValue?: string }) => {\n  const [isExpanded, setIsExpanded] = useStateRef(params?.isExpanded);\n  const [value, setValue] = useState(params?.initialValue || '');\n  return {\n    isExpanded,\n    value,\n    setIsExpanded,\n    setValue,\n  };\n};\n\n/**\n * An elegant way to style elements based on the current state of the component.\n * Inspired by react-router: https://v5.reactrouter.com/web/api/NavLink/classname-string-func\n */\ntype ClassNameFunction<Params> = (params: Params) => string;\ntype ClassName<Params> = HTMLAttributes<HTMLLIElement>['className'] | ClassNameFunction<Params>;\nfunction useClassNameStr<Params>(className: ClassName<Params>, params: Params) {\n  return useMemo(\n    () => (!className || typeof className === 'string' ? className : className(params)),\n    [params, className],\n  );\n}\n\ntype useComoboxHelpersConfigParams = {\n  itemsRef: MutableRefObject<Array<Item>>;\n  listboxRef: RefObject<HTMLElement>;\n  comboboxInputRef: RefObject<HTMLInputElement>;\n  isExpandedRef: React.MutableRefObject<boolean>;\n  onSelect?: (item: Item) => void;\n  setIsExpanded?: (isExpanded: boolean) => void;\n  setValue?: (value: string) => void;\n  setSelectedItem?: (item: Item) => void;\n};\n\n/**\n * The helpers returned by this hook can be used\n * to construct a custom Combobox behavior to your liking.\n * Wrap the low-level components in the Combobox component\n * and pass the helpers down if you need them.\n */\nconst useComboboxHelpers = ({\n  itemsRef,\n  listboxRef,\n  comboboxInputRef,\n  onSelect,\n  isExpandedRef,\n  setIsExpanded,\n  setValue,\n  setSelectedItem,\n}: useComoboxHelpersConfigParams) => {\n  /**\n   * onChange callback for input field\n   */\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (setValue) setValue(e.currentTarget.value);\n      if (setIsExpanded) setIsExpanded(true);\n    },\n    [setValue, setIsExpanded],\n  );\n\n  /**\n   * onFocus callback for input field\n   */\n  const expandOnFocus = useCallback(() => {\n    if (!isExpandedRef.current && setIsExpanded) setIsExpanded(true);\n  }, [setIsExpanded]);\n\n  const handleCloseDatalist = useCallback(() => {\n    if (isExpandedRef.current && setIsExpanded) setIsExpanded(false);\n  }, [setIsExpanded]);\n\n  /**\n   * onKeyDown/onKeyUp callback for window\n   */\n  const closeOnEscape = useCallback((e: KeyboardEvent) => {\n    if (e.key === 'Escape') handleCloseDatalist();\n  }, []);\n\n  /**\n   * onClick callback for window\n   */\n  const handleClickOutside = useCallback(\n    (e: MouseEvent) => {\n      if (!comboboxInputRef.current || !listboxRef.current) return;\n      const targetElement = e.target;\n      if (\n        !targetElement ||\n        (!listboxRef.current.contains(targetElement as HTMLElement) && targetElement !== comboboxInputRef.current)\n      ) {\n        handleCloseDatalist();\n      }\n    },\n    [handleCloseDatalist],\n  );\n\n  /**\n   * onFocus callback for window\n   */\n  const handleFocusOutside = useCallback(() => {\n    if (!comboboxInputRef.current || !listboxRef.current) return;\n    const activeElement = document.activeElement;\n    if (!activeElement || (!listboxRef.current.contains(activeElement) && activeElement !== comboboxInputRef.current)) {\n      handleCloseDatalist();\n    }\n  }, [handleCloseDatalist]);\n\n  /**\n   * Callback for item selection (enter/click)\n   */\n  const handleSelect = useCallback(\n    (item: Item) => {\n      // return focus to input field after selection\n      if (comboboxInputRef.current) comboboxInputRef.current.focus();\n      if (setValue) setValue(item.value);\n      if (setIsExpanded) setIsExpanded(false);\n      if (setSelectedItem) setSelectedItem(item);\n      if (onSelect) onSelect(item); // onSelect at last to allow override of previous state changes\n    },\n    [setValue, onSelect, setIsExpanded, setSelectedItem],\n  );\n\n  /**\n   * keyDown callback for input field\n   */\n  const handleKeyDownOnInput = useCallback(\n    (e: React.KeyboardEvent<HTMLInputElement>) => {\n      // Control+Option+Space is used by VoiceOver on Mac to open the menu\n      const isControlOptionSpace = e.code === 'Space' && e.ctrlKey && e.altKey;\n      const shouldVisitItems = e.key === 'ArrowDown' || isControlOptionSpace;\n      if (!listboxRef.current || !shouldVisitItems) return;\n      if (isControlOptionSpace) e.preventDefault();\n      if (isExpandedRef.current) {\n        const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n        if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n      } else if (setIsExpanded) {\n        setIsExpanded(true);\n        // wait for next tick (render)\n        window.setTimeout(() => {\n          if (!listboxRef.current) return;\n          const firstOption = listboxRef.current.firstElementChild as HTMLLIElement | null;\n          if (firstOption && typeof firstOption.focus === 'function') firstOption.focus();\n        });\n      }\n    },\n    [setIsExpanded],\n  );\n\n  /**\n   * keyDown callback for list element (listbox option)\n   * Uses keyDown instead of keyUp to support \"long-press\" to quickly navigate through list\n   */\n  const handleKeyDownOnListboxOption = useCallback(\n    (e: React.KeyboardEvent<HTMLLIElement>) => {\n      if (!itemsRef.current) return;\n      const item = itemsRef.current.find((item) => item.id === e.currentTarget.id);\n      if (!item) return;\n      if (e.key === 'Enter') return handleSelect(item); // Enter should act as Click. This will also submit a one input form correctly with the latest value.\n      if (!listboxRef.current || e.key === 'Escape' || e.key === 'Tab' || e.key === 'Shift') return; // Do nothing on meta keys\n\n      // Used for navigation\n      if (e.key === 'ArrowDown' || e.key === 'ArrowUp' || e.key === 'Alt') {\n        e.preventDefault(); // prevent safari from doing crazy text selection things\n        let nextNode: Element | null = null;\n        if (e.key === 'ArrowDown' || e.key === 'Alt') {\n          nextNode = e.currentTarget.nextElementSibling || listboxRef.current.firstElementChild;\n        } else {\n          nextNode = e.currentTarget.previousElementSibling || listboxRef.current.lastElementChild;\n        }\n\n        if (!nextNode) return;\n        const nextOption = nextNode as HTMLLIElement;\n        if (nextOption && typeof nextOption.focus === 'function') nextOption.focus();\n        return;\n      }\n\n      // Anything else should go to the input field\n      if (!comboboxInputRef.current) return;\n      comboboxInputRef.current.focus();\n      comboboxInputRef.current.dispatchEvent(new KeyboardEvent('keydown', { key: e.key }));\n    },\n    [handleSelect],\n  );\n\n  return {\n    closeOnEscape,\n    handleClickOutside,\n    handleFocusOutside,\n    handleChange,\n    expandOnFocus,\n    handleSelect,\n    handleKeyDownOnInput,\n    handleKeyDownOnListboxOption,\n  };\n};\n\n/*\n * Low-level components\n */\n\ninterface ComboboxInputProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'value'> {\n  value?: string;\n}\n\n/**\n * The textbox input field.\n * Does currently not implement aria-activedescendant which is not obligatory for datalist input components.\n * Autocomplete off to prevent browser autocomplete from interfering with our own; can be overriden with props.\n */\nconst ComboboxInput = forwardRef<HTMLInputElement, PropsWithRef<ComboboxInputProps>>(\n  ({ value, ...props }, forwardedRef) => {\n    const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n    assertWithWarning(contextAvailable, contextRequiredWarning(ComboboxInput.name));\n\n    return (\n      <input\n        autoComplete=\"off\"\n        {...props}\n        ref={forwardedRef}\n        value={value}\n        type=\"text\"\n        role=\"combobox\"\n        aria-autocomplete=\"list\"\n        aria-haspopup=\"listbox\"\n        aria-expanded={isExpanded}\n        aria-controls={listboxId}\n      />\n    );\n  },\n);\nComboboxInput.displayName = 'ComboboxInput';\n\ninterface HighlightProps extends HTMLAttributes<HTMLElement> {\n  currentInput?: string;\n  as?: 'mark' | 'span';\n}\n\n/**\n * Optional highlight component for the listbox option text.\n * Should be wrapped by ListboxOption. Provide ListBoxOption an aria-label to ensure accessibility, especially if using mark.\n */\nconst Highlight: React.FC<PropsWithChildren<HighlightProps>> = ({\n  children,\n  currentInput = '',\n  as = 'mark',\n  ...props\n}) => {\n  const markedChildren = useMemo(() => {\n    if (typeof children !== 'string') {\n      return children;\n    }\n    const index = children.toLowerCase().indexOf(currentInput.toLowerCase());\n    const inputLength = currentInput.length;\n    if (index === -1 || !inputLength) {\n      return children;\n    }\n    return (\n      <>\n        {children.substring(0, index)}\n        {as === 'mark' ? (\n          <mark {...props}>{children.substring(index, index + inputLength)}</mark>\n        ) : (\n          <span {...props}>{children.substring(index, inputLength)}</span>\n        )}\n        {children.substring(index + inputLength, children.length)}\n      </>\n    );\n  }, [currentInput, children]);\n\n  return <>{markedChildren}</>;\n};\n\ntype ListboxOptionClassNameParams = { isSelected: boolean };\ntype ListboxOptionProps = Omit<HTMLAttributes<HTMLLIElement>, 'className'> & {\n  className?: ClassName<ListboxOptionClassNameParams>;\n};\n\n/**\n * One listbox option.\n */\nconst ListboxOption = forwardRef<HTMLLIElement, PropsWithRef<ListboxOptionProps>>(\n  ({ children, id, className, ...props }, forwardedRef) => {\n    const { selectedItemId } = useComboboxContext();\n    const classNameStr = useClassNameStr<ListboxOptionClassNameParams>(className, {\n      isSelected: !!id && id === selectedItemId,\n    });\n\n    return (\n      <li {...props} ref={forwardedRef} id={id} className={classNameStr} role=\"option\">\n        {children}\n      </li>\n    );\n  },\n);\nListboxOption.displayName = 'ListboxOption';\n\ntype ListboxProps = HTMLAttributes<HTMLUListElement>;\n\n/**\n * The combobox popup list.\n */\nconst Listbox = forwardRef<HTMLUListElement, PropsWithRef<ListboxProps>>(({ children, ...props }, forwardedRef) => {\n  const { contextAvailable, listboxId, isExpanded } = useComboboxContext();\n  assertWithWarning(contextAvailable, contextRequiredWarning(Listbox.name));\n  const isExpandedRef = useRef(isExpanded);\n  const [hasExpanded, setHasExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      setHasExpanded(false);\n    } else if (isExpanded && isExpanded !== isExpandedRef.current) {\n      setHasExpanded(true);\n    }\n    isExpandedRef.current = isExpanded; // dragpointer to the old value\n  }, [isExpanded]);\n\n  // TODO https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live instead of title\n  return (\n    <ul\n      {...props}\n      ref={forwardedRef}\n      id={listboxId}\n      role=\"listbox\"\n      aria-live={hasExpanded ? props['aria-live'] || 'polite' : 'off'}\n    >\n      {children}\n    </ul>\n  );\n});\nListbox.displayName = 'Listbox';\n\n/*\n * Combobox - high-level component\n */\n\ninterface ComboboxProps {\n  listboxId?: ComboboxContext['listboxId'];\n  selectedItemId?: ComboboxContext['selectedItemId'];\n  isExpanded?: ComboboxContext['isExpanded'];\n}\n\ntype Combobox = React.FC<PropsWithChildren<ComboboxProps>> & {\n  ComboboxInput: typeof ComboboxInput;\n  Listbox: typeof Listbox;\n  ListboxOption: typeof ListboxOption;\n  Highlight: typeof Highlight;\n};\n\n/**\n * A container that you can pass all low-level components yourself for advanced use-cases.\n * The Combobox provides the context for the combobox low-level components.\n */\nconst Combobox: Combobox = ({ listboxId, selectedItemId, isExpanded = true, children }) => {\n  const id = useId();\n  return (\n    <ComboboxContext.Provider\n      value={{ contextAvailable: true, listboxId: listboxId || id, selectedItemId, isExpanded }}\n    >\n      {children}\n    </ComboboxContext.Provider>\n  );\n};\n\nCombobox.ComboboxInput = ComboboxInput;\nCombobox.Listbox = Listbox;\nCombobox.ListboxOption = ListboxOption;\nCombobox.Highlight = Highlight;\n\n/*\n * DatalistInput - high-level component & its utilities\n */\n\n/**\n * Internal hook used to create a ref for a state value to allow access to the state value without triggering a re-render.\n */\nfunction useStateRef<S>(initalState: S): [S, (newState: S) => void, React.MutableRefObject<S>] {\n  const [state, setState] = useState(initalState);\n  const ref = useRef(initalState);\n  const setStateRef = (newState: S) => {\n    setState(newState);\n    ref.current = newState;\n  };\n  return [state, setStateRef, ref];\n}\n\n/**\n * Internal hook used to manipulate the value of the input field.\n */\nconst useInternalValue = (\n  value?: string,\n  setValue?: (str: string) => void | Dispatch<SetStateAction<string>>,\n): [string, (str: string) => void] => {\n  const [internalValue, setInternalValue] = useState(value || '');\n  const setValues = useCallback(\n    (newValue: string) => {\n      if (setValue) {\n        setValue(newValue);\n      } else {\n        setInternalValue(newValue);\n      }\n    },\n    [setValue],\n  );\n\n  useEffect(() => {\n    setInternalValue(value || '');\n  }, [value]);\n\n  return [internalValue, setValues];\n};\n\n/**\n * Internal hook to keep track of the selected item.\n */\nconst useInternalSelectedItem = (item?: Item): [Item | undefined, (item: Item) => void] => {\n  const [selectedItem, setSelectedItem] = useState(item);\n\n  useEffect(() => {\n    setSelectedItem(item);\n  }, [item]);\n\n  return [selectedItem, setSelectedItem];\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface Item extends Record<string, any> {\n  id: string;\n  value: string; // Used for filtering. Used for displaying and highlighting if node not provided.\n  node?: ReactNode; // Used for display.\n  label?: string; // If provided, will be used as the aria-label on the list element. If not provided, value will be used instead.\n}\n\ntype Filter = (items: Array<Item>, value?: ComboboxInputProps['value']) => Array<Item>;\n\n/**\n * Alternative function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst startsWithValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.substring(0, value.length).toLowerCase() === value.toLowerCase() : true,\n  );\n\n/**\n * Default function for matching the current input value (needle) and the values of the items array.\n * Returns true if item.value is not of type string (all items will be displayed and a custom filter must be used).\n */\nconst includesValueFilter: Filter = (items, value = '') =>\n  items.filter((item) =>\n    typeof item.value === 'string' ? item.value.toLowerCase().includes(value.toLocaleLowerCase()) : true,\n  );\n\nconst useFilters = (\n  items: Array<Item>,\n  value: ComboboxInputProps['value'],\n  filters: Array<Filter>,\n): [Array<Item>, MutableRefObject<Array<Item>>] => {\n  const filteredRef = useRef<Array<Item>>(items);\n  const filtered = useMemo(\n    () => filters.reduce((currentItems, filter) => filter(currentItems, value), items),\n    [items, filters, value],\n  );\n\n  useEffect(() => {\n    filteredRef.current = filtered;\n  }, [filtered]);\n\n  return [filtered, filteredRef];\n};\n\ntype LabelOptionProps =\n  | {\n      showLabel?: false;\n      label: string;\n    }\n  | {\n      showLabel?: true;\n      label: ReactNode;\n    };\n\ntype LabelProps = HTMLAttributes<HTMLLabelElement>;\n\ntype DatalistInputProps = LabelOptionProps &\n  Omit<HTMLAttributes<HTMLDivElement>, 'onSelect'> & {\n    items: Array<Item>;\n    selectedItem?: Item;\n    value?: ComboboxInputProps['value'];\n    setValue?: useComoboxHelpersConfigParams['setValue'];\n    onSelect?: useComoboxHelpersConfigParams['onSelect'];\n    isExpanded?: ComboboxContext['isExpanded'];\n    setIsExpanded?: useComoboxHelpersConfigParams['setIsExpanded'];\n    placeholder?: ComboboxInputProps['placeholder'];\n    filters?: Array<Filter>;\n    inputProps?: ComboboxInputProps;\n    labelProps?: LabelProps;\n    listboxProps?: ListboxProps;\n    listboxOptionProps?: ListboxOptionProps;\n    isExpandedClassName?: string;\n    isCollapsedClassName?: string;\n    isExpandedStyle?: CSSProperties;\n    isCollapsedStyle?: CSSProperties;\n  };\n\n/**\n * DatalistInput implements all lower-level components for you and provides a simple API for controlling the combobox.\n * Note: Use the useComboboxControls hook to control the value and expanded state of the combobox.\n * DatalistInput implements the ARIA1.2#comboBox specification, including keyboard navigation with ArrowUp and ArrowDown.\n * DatalistInput does currently not implement aria-activedescendant but shifts the focus to the listbox options on ArrowUp and ArrowDown.\n * Note: tabIndex of all listbox options is set to -1 to allow the user to use tab or shift tab to jump out of the datalist without the need to tab through all options.\n */\nconst DatalistInput = forwardRef<HTMLDivElement, PropsWithRef<DatalistInputProps>>(\n  (\n    {\n      label,\n      showLabel = true,\n      items,\n      selectedItem,\n      value,\n      setValue,\n      onSelect,\n      placeholder,\n      isExpanded = DEFAULT_IS_EXPANDED,\n      setIsExpanded,\n      filters = [includesValueFilter],\n      inputProps,\n      labelProps,\n      listboxOptionProps,\n      listboxProps,\n      isExpandedClassName = '',\n      isCollapsedClassName = '',\n      isExpandedStyle,\n      isCollapsedStyle,\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const [internalIsExpanded, setInternalIsExpanded, isExpandedRef] = useStateRef(isExpanded);\n    const [internalValue, setInternalValue] = useInternalValue(value, setValue);\n    const internalTextboxId = useId();\n    const debounceValue = useDeferredValue(internalValue);\n    const [filteredItems, filteredItemsRef] = useFilters(items, debounceValue, filters);\n    const listboxRef = useRef<HTMLUListElement>(null);\n    const comboboxInputRef = useRef<HTMLInputElement>(null);\n    const [internalSelectedItem, setSelectedItem] = useInternalSelectedItem(selectedItem);\n\n    const setIsExpandedStates = useCallback(\n      (state: boolean) => (setIsExpanded ? setIsExpanded(state) : setInternalIsExpanded(state)),\n      [setIsExpanded],\n    );\n\n    const {\n      handleClickOutside,\n      handleFocusOutside,\n      closeOnEscape,\n      handleChange,\n      expandOnFocus,\n      handleSelect,\n      handleKeyDownOnInput,\n      handleKeyDownOnListboxOption,\n    } = useComboboxHelpers({\n      listboxRef,\n      comboboxInputRef,\n      isExpandedRef,\n      setValue: setInternalValue,\n      onSelect,\n      itemsRef: filteredItemsRef,\n      setIsExpanded: setIsExpandedStates,\n      setSelectedItem,\n    });\n\n    useEffect(() => {\n      setInternalIsExpanded(isExpanded);\n    }, [isExpanded]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('click', handleClickOutside);\n      window.addEventListener('keyup', closeOnEscape);\n      return () => {\n        window.removeEventListener('click', handleClickOutside);\n        window.removeEventListener('keyup', closeOnEscape);\n      };\n    }, [handleClickOutside]);\n\n    useEffect(() => {\n      // separate useEffect so we don't re-run it twice with each dependency change\n      window.addEventListener('focusin', handleFocusOutside);\n      return () => {\n        window.removeEventListener('focusin', handleFocusOutside);\n      };\n    }, [handleFocusOutside]);\n\n    return (\n      <div {...props} ref={forwardedRef} className={`react-datalist-input__container ${props.className}`}>\n        <Combobox\n          listboxId={listboxProps?.id}\n          selectedItemId={internalSelectedItem?.id}\n          isExpanded={internalIsExpanded}\n        >\n          {showLabel && (\n            <label\n              {...labelProps}\n              className={`react-datalist-input__label ${labelProps?.className}`}\n              htmlFor={inputProps?.id || internalTextboxId}\n            >\n              {label}\n            </label>\n          )}\n          <ComboboxInput\n            {...inputProps}\n            ref={comboboxInputRef}\n            id={inputProps?.id || internalTextboxId}\n            placeholder={placeholder}\n            value={internalValue}\n            onClick={handleWith(expandOnFocus, inputProps?.onClick)}\n            onFocus={handleWith(expandOnFocus, inputProps?.onFocus)}\n            onChange={handleWith(handleChange, inputProps?.onChange)}\n            onKeyDown={handleWith(handleKeyDownOnInput, inputProps?.onKeyDown)}\n            aria-label={!showLabel && typeof label === 'string' ? label : undefined}\n            className={`react-datalist-input__textbox ${inputProps?.className}`}\n          />\n          {((filteredItems.length && internalIsExpanded) || isCollapsedClassName || isCollapsedStyle) && (\n            <Listbox\n              {...listboxProps}\n              ref={listboxRef}\n              aria-hidden={internalIsExpanded}\n              className={`react-datalist-input__listbox ${\n                internalIsExpanded ? isExpandedClassName : isCollapsedClassName\n              } ${listboxProps?.className || ''}`}\n              style={{\n                ...(internalIsExpanded ? isExpandedStyle : isCollapsedStyle),\n                ...listboxProps?.style,\n              }}\n            >\n              {filteredItems.map((item) => (\n                <ListboxOption\n                  {...listboxOptionProps}\n                  aria-label={item.label || item.value}\n                  key={item.id}\n                  id={item.id}\n                  tabIndex={-1}\n                  onClick={handleWith(() => handleSelect(item), listboxOptionProps?.onClick)}\n                  onKeyDown={handleWith(handleKeyDownOnListboxOption, listboxOptionProps?.onKeyDown)}\n                  className={`react-datalist-input__listbox-option ${listboxOptionProps?.className}`}\n                >\n                  <Highlight currentInput={internalValue}>{item.node || item.value}</Highlight>\n                </ListboxOption>\n              ))}\n            </Listbox>\n          )}\n        </Combobox>\n      </div>\n    );\n  },\n);\nDatalistInput.displayName = 'DatalistInput';\n\nexport type {\n  DatalistInputProps,\n  ComboboxProps,\n  ComboboxInputProps,\n  ListboxProps,\n  ListboxOptionProps,\n  HighlightProps,\n  useComoboxHelpersConfigParams,\n  Item,\n  Filter,\n};\n\nexport {\n  Combobox,\n  DatalistInput,\n  startsWithValueFilter,\n  includesValueFilter,\n  useFilters,\n  useComboboxContext,\n  useComboboxControls,\n  useComboboxHelpers,\n};\n\nexport default DatalistInput;\n", "import d from \"./node_modules/react-datalist-input/dist/index.es.js\";export default d;\nexport * from \"./node_modules/react-datalist-input/dist/index.es.js\""],
  "mappings": "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",
  "names": ["firstOption", "item", "React"]
}
